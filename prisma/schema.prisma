generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations.
model User {
  id            Int             @id @default(autoincrement())
  name          String
  nim           String
  className     String
  noHp          String
  gender        String
  email         String          
  password      String
  major         String
  faculty       String
  document      String
  github        String
  year          Int
  answer      Answer[]
  certification Certification[]
  modul         Modul[]
  questions     Question[]
  submission    Submission[]
  topics        Topic[]
  groups        Group[]     

  @@map("users")  
}

model Admin {
  id            Int             @id @default(autoincrement())
  username      String
  password      String
  name          String
  certification Certification[]
  modul         Modul[]
  submission  Submission[]    // Use plural for consistency

  @@map("admins")
}

model Modul {
  id       Int     @id @default(autoincrement())
  name     String
  link     String
  user_id  Int
  admin_id Int
  status   Boolean
  admin    Admin   @relation(fields: [admin_id], references: [id])
  user     User    @relation(fields: [user_id], references: [id])

  @@map("moduls")
}

model Submission {
  id        Int      @id @default(autoincrement())
  file      String
  submitted Boolean  @default(false)
  group_id   Int      // Foreign key to Group model
  task_id    Int      // Foreign key to Task model
  user_id    Int      // Foreign key to User model
  admin_id   Int      // Foreign key to Admin model
  group     Group    @relation(fields: [group_id], references: [id])  // Define relation to Group
  task      Task     @relation(fields: [task_id], references: [id])   // Define relation to Task
  user      User     @relation(fields: [user_id], references: [id])   // Define relation to User
  admin     Admin    @relation(fields: [admin_id], references: [id])  // Define relation to Admin

  @@map("submisions")
}


model Certification {
  id       Int     @id @default(autoincrement())
  image    String
  name     String?
  user_id  Int
  admin_id Int?
  grade    Int?    @db.SmallInt
  status   String? @db.VarChar
  admin    Admin?  @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  user     User    @relation(fields: [user_id], references: [id])

  @@map("certifications")
}

model Topic {
  id        String      @id @default(uuid())
  title     String
  userId    Int
  questions Question[]
  User      User        @relation(fields: [userId], references: [id])

  @@map("topics")
}

model Question {
  id        String   @id @default(uuid())
  messages  String
  image     String?
  createdAt DateTime @default(now())
  userId    Int
  topicId   String
  answers   Answer[]
  Topic     Topic    @relation(fields: [topicId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  messages   String
  image      String?
  createdAt  DateTime  @default(now())
  userId     Int
  questionId String
  Questions  Question  @relation(fields: [questionId], references: [id])
  User       User      @relation(fields: [userId], references: [id])

  @@map("answers")
}

model Group {
  id        Int      @id @default(autoincrement())
  groupName String
  userId     Int
  User       User     @relation(fields: [userId], references: [id])
  tasks     Task[]   // One-to-many relationship with Task
  submissions Submission[] // Add this field to link Group to Submission

  @@map("groups")
}

model Task {
  id          Int      @id @default(autoincrement())
  taskName    String
  description String
  groupId     Int      // Foreign key to Group
  group       Group    @relation(fields: [groupId], references: [id]) // Define the relation to Group
  submissions Submission[] // One-to-many relationship with Submission

  @@map("tasks")
}
