// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())  
  name          String                                       
  nim           String                                       
  class         String                                       
  noHp          String                                       
  gender        String
  email         String
  password      String                                       
  major         String                                       
  faculty       String                                       
  document      String
  github        String                                       
  year          Int                                          
  modul         Modul[]                                      
  submission    Submission[]                                 
  certification Certification[]                             
  questions     Questions[]                                  // Relasi ke Questions yang dibuat oleh user
  answers       Answer[]                                     // Relasi ke Answers yang dibuat oleh user
  topics        Topic[]
}

model Admin {
  id            Int           @id @default(autoincrement())
  username      String                                       
  password      String                                       
  name          String                                       
  modul         Modul[]                                      // Hubungan ke modul-modul yang diatur oleh admin
  submission    Submission[]                                 // Hubungan ke submission yang diawasi admin
  certification Certification[]                             // Hubungan ke sertifikasi yang diurus oleh admin
}

model Modul {
  id        Int     @id @default(autoincrement())            
  name      String                                           
  link      String                                           
  user_id   Int                                              
  admin_id  Int                                              // ID admin yang mengelola modul
  status    Boolean                                          // Status modul (aktif/tidak)
  user      User     @relation(fields: [user_id], references: [id])  // Hubungan ke pengguna
  admin     Admin    @relation(fields: [admin_id], references: [id]) // Hubungan ke admin
}

model Submission {
  id        Int     @id @default(autoincrement())           
  openedAt  DateTime                                        
  closedAt  DateTime                                        
  file      String                                          
  user_id   Int                                             
  admin_id  Int                                             
  user      User     @relation(fields: [user_id], references: [id])  // Hubungan ke pengguna
  admin     Admin    @relation(fields: [admin_id], references: [id]) // Hubungan ke admin
}

model Certification {
  id        Int     @id @default(autoincrement())            
  image     String                                           
  name      String                                           
  user_id   Int                                              // ID pengguna yang menerima sertifikasi
  admin_id  Int                                              // ID admin yang mengeluarkan sertifikasi
  user      User     @relation(fields: [user_id], references: [id])  // Hubungan ke pengguna
  admin     Admin    @relation(fields: [admin_id], references: [id]) // Hubungan ke admin
}

model Topic {
  id        String      @id @default(uuid())                 
  title     String
  userId    Int
  User      User        @relation(fields: [userId], references: [id]) // Relasi ke pengguna yang membuat topik
  questions Questions[] // Relasi one-to-many ke pertanyaan
}

model Questions {
  id        String      @id @default(uuid())                    
  messages  String
  image     String?                                           
  createdAt DateTime    @default(now())                         
  userId    Int                                              // ID pengguna yang mengirim pesan
  topicId   String                                           // ID topik di mana pesan dikirim
  User      User        @relation(fields: [userId], references: [id])   // Hubungan ke pengguna yang mengirim pesan
  Topic     Topic       @relation(fields: [topicId], references: [id])  // Hubungan ke topik di mana pesan dikirim
  answers   Answer[]    // Relasi one-to-many ke jawaban
}

model Answer {
  id        String         @id @default(uuid()) 
  messages  String
  image     String?
  createdAt DateTime    @default(now()) 
  userId    Int
  questionId String     // ID pertanyaan yang dijawab
  User      User        @relation(fields: [userId], references: [id]) // Hubungan ke pengguna yang menjawab
  Questions Questions   @relation(fields: [questionId], references: [id]) // Hubungan ke pertanyaan yang dijawab
}
