generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id            Int             @id @default(autoincrement())
  name          String
  nim           String
  className     String
  noHp          String
  gender        String
  email         String
  password      String
  major         String
  faculty       String
  document      String
  github        String
  year          Int
  answers       Answer[]
  certification Certification[]
  Group         Group[]
  modul         Modul[]
  questions     Questions[]
  submission    Submission[]
  topics        Topic[]
}

model Admin {
  id            Int             @id @default(autoincrement())
  username      String
  password      String
  name          String
  Certification Certification[]
  modul         Modul[]
  submission    Submission[]
}

model Modul {
  id       Int     @id @default(autoincrement())
  name     String
  link     String
  user_id  Int
  admin_id Int
  status   Boolean
  admin    Admin   @relation(fields: [admin_id], references: [id])
  user     User    @relation(fields: [user_id], references: [id])
}

model Submission {
  id          Int      @id @default(autoincrement())
  openedAt    DateTime
  closedAt    DateTime
  file        String
  user_id     Int?
  admin_id    Int?
  title       String?  @db.VarChar
  module      String?  @db.VarChar
  description String?
  taskId      BigInt?
  admin       Admin?   @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  Task        Task?    @relation(fields: [taskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Restrict)
}

model Certification {
  id       Int     @id @default(autoincrement())
  image    String
  name     String?
  user_id  Int
  admin_id Int?
  grade    Int?    @db.SmallInt
  status   String? @db.VarChar
  Admin    Admin?  @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  user     User    @relation(fields: [user_id], references: [id])
}

model Topic {
  id        String      @id @default(uuid())
  title     String
  userId    Int
  questions Questions[]
  User      User        @relation(fields: [userId], references: [id])
}

model Questions {
  id        String   @id @default(uuid())
  messages  String
  image     String?
  createdAt DateTime @default(now())
  userId    Int
  topicId   String
  answers   Answer[]
  Topic     Topic    @relation(fields: [topicId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Answer {
  id         String    @id @default(uuid())
  messages   String
  image      String?
  createdAt  DateTime  @default(now())
  userId     Int
  questionId String
  Questions  Questions @relation(fields: [questionId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Group {
  id                        BigInt   @id @default(autoincrement())
  created_at                DateTime @default(now()) @db.Timestamptz(6)
  groupName                 String?  @default("")
  user_ids                  Int?
  task_ids                  BigInt?
  Task_Group_task_idsToTask Task?    @relation("Group_task_idsToTask", fields: [task_ids], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                      User?    @relation(fields: [user_ids], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Task                      Task[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Task {
  id                         BigInt       @id @default(autoincrement())
  created_at                 DateTime     @default(now()) @db.Timestamptz(6)
  taskName                   String?
  description                String?
  groupId                    BigInt?
  Group_Group_task_idsToTask Group[]      @relation("Group_task_idsToTask")
  Submission                 Submission[]
  Group                      Group?       @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
