generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations.
model User {
  id            Int             @id @default(autoincrement())
  name          String
  nim           String          @unique
  className     String
  noHp          String
  gender        String
  email         String          @unique
  password      String
  major         String
  faculty       String
  document      String
  github        String
  year          Int
  group_id      Int?
  answers       Answer[]
  certification Certification[]
  modul         Modul[]
  questions     Question[]
  submission    Submission[]
  topics        Topic[]
  groups        Group?          @relation(fields: [group_id], references: [id])

  @@map("users")
}

model Admin {
  id            Int             @id @default(autoincrement())
  username      String
  password      String
  name          String
  certification Certification[]
  modul         Modul[]
  submission    Submission[]

  @@map("admins")
}

model Modul {
  id        Int       @id @default(autoincrement())
  name      String
  file      String
  user_id   Int?
  admin_id  Int?
  status    Boolean?
  opened_at DateTime? @db.Timestamp(6)
  closed_at DateTime? @db.Timestamp(6)
  admin     Admin?    @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  user      User?     @relation(fields: [user_id], references: [id], onDelete: Restrict)

  @@map("moduls")
}

model Submission {
  id         Int       @id @default(autoincrement())
  file       String
  submitted  Boolean?  @default(false)
  group_id   Int?
  task_id    Int?
  user_id    Int?
  admin_id   Int?
  created_at DateTime? @db.Timestamp(6)
  status     String?
  grade      Int?      @db.SmallInt
  admin      Admin?    @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  group      Group?    @relation(fields: [group_id], references: [id], onDelete: Restrict)
  task       Task?     @relation(fields: [task_id], references: [id], onDelete: Restrict)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Restrict)

  @@map("submisions")
}

model Certification {
  id       Int     @id @default(autoincrement())
  image    String
  user_id  Int
  admin_id Int?
  grade    Int?    @db.SmallInt
  status   String? @db.VarChar
  admin    Admin?  @relation(fields: [admin_id], references: [id], onDelete: Restrict)
  user     User    @relation(fields: [user_id], references: [id])

  @@map("certifications")
}

model Topic {
  id        String     @id @default(uuid())
  title     String
  userId    Int
  questions Question[]
  users     User       @relation(fields: [userId], references: [id])

  @@map("topics")
}

model Question {
  id        String   @id @default(uuid())
  messages  String
  image     String?
  createdAt DateTime @default(now())
  userId    Int
  topicId   String
  answers   Answer[]
  topics    Topic    @relation(fields: [topicId], references: [id])
  users     User     @relation(fields: [userId], references: [id])

  @@map("questions")
}

model Answer {
  id         String   @id @default(uuid())
  messages   String
  image      String?
  createdAt  DateTime @default(now())
  userId     Int
  questionId String
  questions  Question @relation(fields: [questionId], references: [id])
  users      User     @relation(fields: [userId], references: [id])

  @@map("answers")
}

model Group {
  id          Int          @id @default(autoincrement())
  groupName   String
  submissions Submission[]
  tasks       Task[]
  users       User[]

  @@map("groups")
}

model Task {
  id          Int          @id @default(autoincrement())
  opened_at   DateTime     @db.Timestamp(6)
  title       String
  groupId     Int?
  closed_at   DateTime?    @db.Timestamp(6)
  module      String?      @db.VarChar
  description String?
  file        String?
  submissions Submission[]
  groups      Group?       @relation(fields: [groupId], references: [id], onDelete: Restrict)

  @@map("tasks")
}
